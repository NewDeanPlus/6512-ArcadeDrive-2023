// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.Commands;
import frc.robot.Robot;
import frc.robot.RobotContainer;
import static frc.robot.Constants.Speeds.*;

import frc.robot.subsystems.Arm;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.Elevator;
import frc.robot.subsystems.Pneumatics;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class EfficientArm extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Arm m_arm;
        private final Elevator m_elev;
        private final Pneumatics m_p;
        private String armState;
        private String targetState;

 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public EfficientArm(Arm subsystem, Elevator subsystem2, Pneumatics subsystem3, String targetState) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_arm = subsystem;
        m_elev = subsystem2;
        m_p = subsystem3;
        addRequirements(m_arm, m_elev);
        targetState = this.targetState;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        armState = SmartDashboard.getString("ArmState", " ");
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        switch(armState){
            case "Rest":
                switch(targetState){
                    case "Up":
                        Commands.parallel(
                        Commands.sequence(
                            m_p.moveRatchetR(),
                            m_arm.moveArmDown(ASpeedDown).until(()->m_arm.returnEncoderPos()<=-150)
                        ),
                        m_elev.moveElevatorUp(ESpeedUp),
                        m_arm.setTargetState(targetState)
                    );
                    case "Down":
                        Commands.sequence(
                            m_p.moveRatchetR(),
                            m_arm.moveArmDown(ASpeedDown).until(()->m_arm.returnEncoderPos()<=-150),
                            m_arm.setTargetState(targetState)
                        );
                    default: break;
                }
            case "Up":
                switch(targetState){
                    case "Rest":
                    Commands.parallel(
                        Commands.sequence(
                            m_p.moveRatchetF(),
                            m_arm.moveArmUp(ASpeedUp).until(()->m_arm.returnEncoderPos()>=0)
                        ),
                        m_elev.moveElevatorDown(ESpeedDown),
                        m_arm.setTargetState(targetState)
                    );
                    default: break;
                }
            case "Down":
                switch(targetState){
                    case "Rest":
                        Commands.sequence(
                            m_p.moveRatchetF(),
                            m_arm.moveArmUp(ASpeedUp).until(()->m_arm.returnEncoderPos()>=0),
                            m_arm.setTargetState(targetState)
                        );
                    default: break;
                }
            break;
        }
        
        //FINDOUT //figure out trapezoidal acceleration for smooth driving
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
