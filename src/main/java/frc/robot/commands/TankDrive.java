// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Robot;
import frc.robot.RobotContainer;
import static frc.robot.Constants.Speeds.*;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class TankDrive extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DriveTrain m_driveTrain;
        private Joystick controller;
        private double speed;
        private double turn;
        private DifferentialDrive d;
        private double lspeed, rspeed;
        private Joystick j;
        private XboxController j0;
        private XboxController x;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public TankDrive(DriveTrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        d = m_driveTrain.getDifferentialDrive();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        j = RobotContainer.getInstance().getJoystick1();
        j0 = RobotContainer.getInstance().getXbox2();
        x= RobotContainer.getInstance().getXbox();
        //speed = j.getThrottle() * .8;
        //turn = j.getTwist() * .8;

        //NEO RPM: 5676
        //CIM RPM: 5310

        lspeed = (DriveSpeedMultiplier*DriveSpeedOffset*x.getLeftY());//x.getLeftY()); //+ turn;              //left speed slower when turned to left (neg turn values) //FIX ASAP
        rspeed = (DriveSpeedMultiplier*x.getRightY());// - turn;  //right speed slower when turned to right (pos turn values)
        //SmartDashboard.putNumber("Speed", lspeed);


        /*if(controller.getTwist()>.8){
            d.tankDrive(lspeed, 0);
        }else if(controller.getTwist()<-.8){
            d.tankDrive(0, rspeed);
        }else{*/
            //d.tankDrive(lspeed,rspeed); //can also square inputs with true in third space to square inputs, although may have to decrease speed
        //}
        /*if(j.getTwist()<-.5){
            d.tankDrive(((-DriveSpeedMultiplier)*DriveSpeedMultiplier)*1.2, (DriveSpeedMultiplier/2)*1.2);
        }else if(j.getTwist()>.5){
            d.tankDrive(((DriveSpeedMultiplier)*DriveSpeedMultiplier)*1.2, (-DriveSpeedMultiplier/2)*1.2);
        }else{
            d.tankDrive(-lspeed, -rspeed);
        }*/

        d.tankDrive(-lspeed, -rspeed);

        /*
        d.tankDrive(-j0.getLeftY()*DriveSpeedMultiplier*DriveSpeedOffset, -j0.getRightY()*DriveSpeedMultiplier);
        */
        
        //FINDOUT //figure out trapezoidal acceleration for smooth driving
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
