// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;
import static edu.wpi.first.wpilibj2.command.Commands.*;
import static frc.robot.Constants.Speeds.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Arm m_arm = new Arm();
    public final DriveTrain m_driveTrain = new DriveTrain();
    public final Elevator m_elev = new Elevator();
    public final Pneumatics m_p = new Pneumatics();
    public final Vision m_vis = new Vision();

// Joysticks
private final Joystick joystick1 = new Joystick(0);
private final XboxController xbox = new XboxController(1);

  public CommandBase autonomous = Commands.sequence(
    m_p.moveRatchetR().until(()->(Timer.getFPGATimestamp()==3)),
        Commands.parallel(
            m_arm.moveArmDown(ASpeedDown).until(()->(Timer.getFPGATimestamp()==6)), 
            m_elev.moveElevatorUp(ESpeedUp).until(()->(Timer.getFPGATimestamp()==6))
        ),
    m_p.moveClawF(),
      Commands.parallel(
        m_arm.moveArmDown(ASpeedDown).until(()->(Timer.getFPGATimestamp()==10)), 
        m_elev.moveElevatorUp(ESpeedUp).until(()->(Timer.getFPGATimestamp()==10))
      ),
    m_driveTrain.autoDrive().until(()->(Timer.getFPGATimestamp()==14))
  ).until(()->(Timer.getFPGATimestamp()==15));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    //SmartDashboard.putData("Autonomous Command", new AutonomousCommand(m_arm, m_driveTrain, m_elev, m_p));
    //SmartDashboard.putData("MoveArmUp", new MoveArmUp(m_arm, joystick1));
    //SmartDashboard.putData("MoveArmDown", new MoveArmDown(m_arm, joystick1));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new TankDrive(m_driveTrain));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand(m_arm, m_driveTrain, m_elev, m_p));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
    //SmartDashboard.putNumber("Speed", 0);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton armUp = new JoystickButton(joystick1, 3);        
armUp.whileTrue(sequence( m_p.moveRatchetF(),m_arm.moveArmUp(ASpeedUp)));//.whileFalse(m_arm.stopArm());
                        
final JoystickButton armDown = new JoystickButton(joystick1, 4);        
armDown.whileTrue(sequence( m_p.moveRatchetR(),m_arm.moveArmDown(ASpeedDown)));//.whileFalse(m_arm.stopArm());

final JoystickButton elevUp = new JoystickButton(joystick1, 5);        
//elevUp.whileTrue(new MoveElevator(m_arm, joystick1,"Up").withInterruptBehavior(InterruptionBehavior.kCancelSelf));
elevUp.whileTrue(m_elev.moveElevatorUp(ESpeedUp)).whileFalse(m_elev.stopElevator());

final JoystickButton elevDown = new JoystickButton(joystick1, 6);        
//elevDown.whileTrue(new MoveElevator(m_arm, joystick1,"Down").withInterruptBehavior(InterruptionBehavior.kCancelSelf));
elevDown.whileTrue(m_elev.moveElevatorDown(ESpeedDown)).whileFalse(m_elev.stopElevator());
                        
final JoystickButton emergencyStop = new JoystickButton(joystick1,1);
//emergencyStop.whileTrue(new EmerStop(m_arm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
emergencyStop.whileTrue(parallel(m_arm.stopArm(), m_elev.stopElevator()));

final JoystickButton clawOpen = new JoystickButton(joystick1, 7);
clawOpen.onTrue(m_p.moveClawF());

final JoystickButton clawClose = new JoystickButton(joystick1, 8);
clawClose.onTrue(m_p.moveClawR());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick1() {
        return joystick1;
    }

  public XboxController getXbox(){
    return xbox;
  }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}

