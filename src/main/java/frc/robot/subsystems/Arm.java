// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.PowerDistribution.ModuleType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private CANSparkMax mc1;
    private RelativeEncoder e1;
    private double armEncoderPos;

    /**
    *
    */
    public Arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //arm motor controller
        mc1 = new CANSparkMax(7, MotorType.kBrushless);
        mc1.setInverted(true);

        e1 = mc1.getEncoder();
        e1.setPosition(0);
        e1.setPositionConversionFactor(1);
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("ArmEncoder", e1.getPosition());
        // This method will be called once per scheduler run
        //SmartDashboard.putNumber("EncoderPosition", 0);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public CommandBase moveArmUp(double speed){
        return this.startEnd(()->mc1.set(-speed) , ()->mc1.set(0));
    }

    public CommandBase moveArmDown(double speed){
        return this.startEnd(()->mc1.set(speed) , ()->mc1.set(0));
    }

    public CommandBase setTargetState(String targetState){
        return this.runOnce(()->SmartDashboard.putString("ArmState", targetState));
    }

    public CommandBase stopArm(){
        return this.runOnce(()->mc1.set(0));
    }

    public double returnEncoderPos(){
        double armEncoderPos = e1.getPosition();
        SmartDashboard.putNumber("ArmEncoder", armEncoderPos);
        return armEncoderPos;
    }
}

