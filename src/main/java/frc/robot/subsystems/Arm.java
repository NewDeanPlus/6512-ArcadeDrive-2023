// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.PowerDistribution.ModuleType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private CANSparkMax mc1, mc2, mc3;
    private RelativeEncoder e1;
    private MotorControllerGroup am;
    private DoubleSolenoid rat, claw;

    /**
    *
    */
    public Arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //arm motor controller
        mc1 = new CANSparkMax(7, MotorType.kBrushless);

        e1 = mc1.getEncoder();
        e1.setPosition(0);

        //elevator motor controllers
        mc2 = new CANSparkMax(5, MotorType.kBrushed);
        mc3 = new CANSparkMax(6, MotorType.kBrushed);

        am = new MotorControllerGroup(mc2, mc3);

        rat = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, 2, 3);
        claw = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, 0, 1);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        //SmartDashboard.putNumber("EncoderPosition", 0);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void moveArmUp(){
        mc1.set(-.4);
    }

    public void moveArmDown(){
        mc1.set(.4);
    }

    public void stop(){
        mc1.set(0);
    }

    public void moveElevatorUp(){
        mc2.set(-.3);// mc3.set(-.3);
    }

    public void moveElevatorDown(){
        am.set(.3);// mc3.set(.3);
    }

    public void moveRatchetF(){
        rat.set(Value.kForward);
    }

    public void moveRatchetR(){
        rat.set(Value.kReverse);
    }

    public void moveClawF(){
        claw.set(Value.kForward);
    }

    public void moveClawR(){
        claw.set(Value.kReverse);
    }
}

